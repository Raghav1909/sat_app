// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: students.sql

package models

import (
	"context"
)

const createStudent = `-- name: CreateStudent :exec
INSERT INTO students (name, address, city, country, pincode, sat_score, passed)
VALUES (?, ?, ?, ?, ?, ?, ?)
`

type CreateStudentParams struct {
	Name     string
	Address  string
	City     string
	Country  string
	Pincode  string
	SatScore int64
	Passed   bool
}

func (q *Queries) CreateStudent(ctx context.Context, arg CreateStudentParams) error {
	_, err := q.db.ExecContext(ctx, createStudent,
		arg.Name,
		arg.Address,
		arg.City,
		arg.Country,
		arg.Pincode,
		arg.SatScore,
		arg.Passed,
	)
	return err
}

const deleteStudent = `-- name: DeleteStudent :exec
DELETE FROM students WHERE students.name = ?
`

func (q *Queries) DeleteStudent(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, deleteStudent, name)
	return err
}

const getAllStudents = `-- name: GetAllStudents :many
SELECT 
    name, 
    address, 
    city, 
    country, 
    pincode, 
    sat_score, 
    CASE passed WHEN 1 THEN true ELSE false END AS passed
FROM students
`

type GetAllStudentsRow struct {
	Name     string
	Address  string
	City     string
	Country  string
	Pincode  string
	SatScore int64
	Passed   int64
}

// View all data from the students table
func (q *Queries) GetAllStudents(ctx context.Context) ([]GetAllStudentsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllStudents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllStudentsRow
	for rows.Next() {
		var i GetAllStudentsRow
		if err := rows.Scan(
			&i.Name,
			&i.Address,
			&i.City,
			&i.Country,
			&i.Pincode,
			&i.SatScore,
			&i.Passed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStudentByName = `-- name: GetStudentByName :one
SELECT name, address, city, country, pincode, sat_score, passed
FROM students
WHERE name = ? LIMIT 1
`

type GetStudentByNameRow struct {
	Name     string
	Address  string
	City     string
	Country  string
	Pincode  string
	SatScore int64
	Passed   bool
}

func (q *Queries) GetStudentByName(ctx context.Context, name string) (GetStudentByNameRow, error) {
	row := q.db.QueryRowContext(ctx, getStudentByName, name)
	var i GetStudentByNameRow
	err := row.Scan(
		&i.Name,
		&i.Address,
		&i.City,
		&i.Country,
		&i.Pincode,
		&i.SatScore,
		&i.Passed,
	)
	return i, err
}

const getStudentRank = `-- name: GetStudentRank :one
SELECT COUNT(*) + 1 AS student_rank
FROM students
WHERE students.sat_score > (SELECT students.sat_score FROM students WHERE students.name = ?)
`

func (q *Queries) GetStudentRank(ctx context.Context, name string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getStudentRank, name)
	var student_rank int64
	err := row.Scan(&student_rank)
	return student_rank, err
}

const updateStudentScore = `-- name: UpdateStudentScore :exec
UPDATE students
SET sat_score = ?, passed = ?
WHERE students.name = ?
`

type UpdateStudentScoreParams struct {
	SatScore int64
	Passed   bool
	Name     string
}

func (q *Queries) UpdateStudentScore(ctx context.Context, arg UpdateStudentScoreParams) error {
	_, err := q.db.ExecContext(ctx, updateStudentScore, arg.SatScore, arg.Passed, arg.Name)
	return err
}
