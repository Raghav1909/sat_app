// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: students.sql

package models

import (
	"context"
	"database/sql"
)

const createStudent = `-- name: CreateStudent :exec
INSERT INTO students (name, address, city, country, pincode, sat_score, passed)
VALUES (?, ?, ?, ?, ?, ?, ?)
`

type CreateStudentParams struct {
	Name     string
	Address  sql.NullString
	City     sql.NullString
	Country  sql.NullString
	Pincode  sql.NullString
	SatScore sql.NullInt64
	Passed   interface{}
}

func (q *Queries) CreateStudent(ctx context.Context, arg CreateStudentParams) error {
	_, err := q.db.ExecContext(ctx, createStudent,
		arg.Name,
		arg.Address,
		arg.City,
		arg.Country,
		arg.Pincode,
		arg.SatScore,
		arg.Passed,
	)
	return err
}

const deleteStudent = `-- name: DeleteStudent :exec
DELETE FROM students WHERE students.name = ?
`

// Delete a student record by name
func (q *Queries) DeleteStudent(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, deleteStudent, name)
	return err
}

const getAllStudents = `-- name: GetAllStudents :many
SELECT id, name, address, city, country, pincode, sat_score, passed FROM students
`

// View all data from the students table
func (q *Queries) GetAllStudents(ctx context.Context) ([]Student, error) {
	rows, err := q.db.QueryContext(ctx, getAllStudents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Student
	for rows.Next() {
		var i Student
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Address,
			&i.City,
			&i.Country,
			&i.Pincode,
			&i.SatScore,
			&i.Passed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStudentRank = `-- name: GetStudentRank :one
SELECT COUNT(*) + 1 AS student_rank
FROM students
WHERE students.sat_score > (SELECT students.sat_score FROM students WHERE students.name = ?)
`

// Get the rank of a student by SAT score (higher SAT score = better rank)
func (q *Queries) GetStudentRank(ctx context.Context, name string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getStudentRank, name)
	var student_rank int64
	err := row.Scan(&student_rank)
	return student_rank, err
}

const updateStudentScore = `-- name: UpdateStudentScore :exec
UPDATE students
SET sat_score = ?, passed = ?
WHERE students.name = ?
`

type UpdateStudentScoreParams struct {
	SatScore sql.NullInt64
	Passed   interface{}
	Name     string
}

// Update the SAT score and passed status for a student by name
func (q *Queries) UpdateStudentScore(ctx context.Context, arg UpdateStudentScoreParams) error {
	_, err := q.db.ExecContext(ctx, updateStudentScore, arg.SatScore, arg.Passed, arg.Name)
	return err
}
